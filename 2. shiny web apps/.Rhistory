fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50),
sliderInput("slider", "Number of observations:", 1, 100, 50)
),
infoBox("new",20,icon=icon("credit card"))
)
),
# Second tab content
tabItem(tabName = "modeling",
h2("Widgets tab content")
),
# Third tab content
tabItem(tabName = "geo",
h2("Geographic tab content"),
bootstrapPage("Interactive map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("styles.css"),
includeScript("gomap.js")
),
leafletOutput("map", width="100%", height="100%"),
# Shiny versions prior to 0.11 should use class="modal" instead.
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = "auto", right = 20, bottom = "auto",
width = 330, height = "auto",
h2("ZIP explorer"),
selectInput("color", "Color", vars),
selectInput("size", "Size", size, selected = "same"),
plotOutput("histCentile", height = 200),
plotOutput("scatterCollegeIncome", height = 250)
),
tags$div(id="cite",
'Data compiled for ', tags$em('Coming Apart: The State of White America, 1960â2010'), ' by Charles Murray (Crown Forum, 2012).')
)
)
)
)
)
)
server <- function(input, output,session) {
# Create the map
output$map <- renderLeaflet({
leaflet(station) %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
# setView(lng=-74.00653609,lat = 40.70955958,zoom = 15)
fitBounds(~min(longitude),~min(latitude),~max(longitude),~max(latitude))
})
# A reactive expression that returns the set of zips that are
# in bounds right now
zipsInBounds <- reactive({
if (is.null(input$map_bounds))
return(station[FALSE,])
bounds <- input$map_bounds
latRng <- range(bounds$north, bounds$south)
lngRng <- range(bounds$east, bounds$west)
subset(station,
latitude >= latRng[1] & latitude <= latRng[2] &
longitude >= lngRng[1] & longitude <= lngRng[2])
})
# Precalculate the breaks we'll need for the two histograms
centileBreaks <- hist(plot = FALSE, station$daily_trips, breaks = 20)$breaks
output$histCentile <- renderPlot({
# If no zipcodes are in view, don't plot
if (nrow(zipsInBounds()) == 0)
return(NULL)
hist(zipsInBounds()$daily_trips,
breaks = centileBreaks,
main = "Histogram of Daily Trips",
xlab = "How Many Trips per Day",
xlim = range(station$daily_trips),
col = 'orangered',
border = 'black')
})
output$scatterCollegeIncome <- renderPlot({
# If no zipcodes are in view, don't plot
if (nrow(zipsInBounds()) == 0)
return(NULL)
#print(xyplot(daily_trips ~ daily_trips, data = zipsInBounds()))
a <- zipsInBounds() %>% group_by(boro) %>% summarize(total = length(boro))
ggplot(a, aes(x=boro, y=total)) +
geom_bar(stat="identity",fill="black", colour="black") +
labs(title="Stations", x="Station Numbers", y="Boros")
})
# This observer is responsible for maintaining the circles and legend,
# according to the variables the user has chosen to map to color and size.
observe({
colorBy <- input$color
sizeBy <- input$size
if (colorBy == "year") {
# Color and palette are treated specially in the "superzip" case, because
# the values are categorical instead of continuous.
colorData <- ifelse(station$year == 2013, "2013", "2015")
pal <- colorFactor(c("blue","firebrick3"), colorData)
} else if (colorBy == "boro") {
colorData <- station$boro
pal <- colorFactor(c("forestgreen","blue","darkorchid4"), colorData)
} else {
colorData <- station[[colorBy]]
pal <- colorBin(c("red","darkviolet","darkblue","black"),
colorData, 4, pretty = FALSE)
}
if (sizeBy == "same") {
# Radius is treated specially in the "superzip" case.
radius <- 90
} else if (sizeBy == "popularity") {
radius <- 90
}
else {
radius <- station[[sizeBy]] / max(station[[sizeBy]]) * 300
}
leafletProxy("map", data = station) %>%
clearShapes() %>%
addCircles(~longitude, ~latitude, radius=radius, layerId=~station.id,
stroke=FALSE, fillOpacity=0.4, fillColor=pal(colorData)) %>%
addLegend("bottomleft", pal=pal, values=colorData, title=colorBy,
layerId="colorLegend")
})
# Show a popup at the given location
showZipcodePopup <- function(zipcode, lat, lng) {
selectedZip <- station[station$station.id == zipcode,]
content <- as.character(tagList(
tags$h4("Station ID:", as.integer(selectedZip$station.id)),
tags$strong(HTML(sprintf("%s, %s",
selectedZip$latitude, selectedZip$longitude
))), tags$br(),
sprintf("The staion's name: %s", as.character(selectedZip$station.name)), tags$br(),
sprintf("The number of trips: %s", as.integer(selectedZip$daily_trips)), tags$br(),
sprintf("In service since: %s", as.character(selectedZip$year))
))
leafletProxy("map") %>% addPopups(lng, lat, content, layerId = zipcode)
}
# When map is clicked, show a popup with city info
observe({
leafletProxy("map") %>% clearPopups()
event <- input$map_shape_click
if (is.null(event))
return()
isolate({
showZipcodePopup(event$id, event$lat, event$lng)
})
})
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui=ui, server=server)
library(shiny);library(shinydashboard)
library(leaflet)
library(RColorBrewer)
library(scales)
library(lattice)
library(dplyr)
library(ggplot2)
station <- read.csv("station_for_map.csv", stringsAsFactors = F)
vars <- c(
"Which year put in service?" = "year",
"Boro" = "boro",
"Avarage daily trips" = "daily_trips"
)
size <- c(
"Same size" = "same",
"Popularity" = "popularity",
"Avarage daily trips" = "daily_trips"
)
ui <- dashboardPage(skin = "purple",
dashboardHeader(title= "NYC Citibike Ridership Project",titleWidth=300,
dropdownMenu(type = "messages",
messageItem(
from = "Sales Dept",
message = "Sales are steady this month."
)
),
dropdownMenu(type = "notifications",
notificationItem(
text = "5 new users today",
icon("users")
)
),
dropdownMenu(type = "tasks", badgeStatus = "success",
taskItem(value = 90, color = "green",
"Documentation"
)
)
),
sidebar <- dashboardSidebar(
sidebarMenu(
sidebarSearchForm(textId = "searchText", buttonId = "searchButton",label = "Search..."),
menuItem("Geo",tabName = "geo",icon=icon("calendar")),
menuItem("Exploratory Analysis", tabName = "eda", icon = icon("dashboard")),
menuItem("Modeling", tabName = "modeling", icon = icon("th"),badgeLabel = "new", badgeColor = "green"),
menuItem("Source code", icon = icon("file-code-o"),
href = "https://github.com/richarddeng88/citibike"),
sidebarUserPanel("good")
)
),
body <- dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "eda",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50),
sliderInput("slider", "Number of observations:", 1, 100, 50)
),
infoBox("new",20,icon=icon("credit card"))
)
),
# Second tab content
tabItem(tabName = "modeling",
h2("Widgets tab content")
),
# Third tab content
tabItem(tabName = "geo",
h2("Geographic tab content"),
bootstrapPage("Interactive map",
div(class="outer",
tags$head(
# Include our custom CSS
includeCSS("styles.css"),
includeScript("gomap.js")
),
leafletOutput("map", width="100%", height="100%"),
# Shiny versions prior to 0.11 should use class="modal" instead.
absolutePanel(id = "controls", class = "panel panel-default", fixed = TRUE,
draggable = TRUE, top = 60, left = "auto", right = 20, bottom = "auto",
width = 330, height = "auto",
h2("ZIP explorer"),
selectInput("color", "Color", vars),
selectInput("size", "Size", size, selected = "same"),
plotOutput("histCentile", height = 200),
plotOutput("scatterCollegeIncome", height = 250)
),
tags$div(id="cite",
'Data compiled for ', tags$em('Coming Apart: The State of White America, 1960â2010'), ' by Charles Murray (Crown Forum, 2012).')
)
)
)
)
)
)
server <- function(input, output,session) {
# Create the map
output$map <- renderLeaflet({
leaflet(station) %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
# setView(lng=-74.00653609,lat = 40.70955958,zoom = 15)
fitBounds(~min(longitude),~min(latitude),~max(longitude),~max(latitude))
})
# A reactive expression that returns the set of zips that are
# in bounds right now
zipsInBounds <- reactive({
if (is.null(input$map_bounds))
return(station[FALSE,])
bounds <- input$map_bounds
latRng <- range(bounds$north, bounds$south)
lngRng <- range(bounds$east, bounds$west)
subset(station,
latitude >= latRng[1] & latitude <= latRng[2] &
longitude >= lngRng[1] & longitude <= lngRng[2])
})
# Precalculate the breaks we'll need for the two histograms
centileBreaks <- hist(plot = FALSE, station$daily_trips, breaks = 20)$breaks
output$histCentile <- renderPlot({
# If no zipcodes are in view, don't plot
if (nrow(zipsInBounds()) == 0)
return(NULL)
hist(zipsInBounds()$daily_trips,
breaks = centileBreaks,
main = "Histogram of Daily Trips",
xlab = "How Many Trips per Day",
xlim = range(station$daily_trips),
col = 'orangered',
border = 'black')
})
output$scatterCollegeIncome <- renderPlot({
# If no zipcodes are in view, don't plot
if (nrow(zipsInBounds()) == 0)
return(NULL)
#print(xyplot(daily_trips ~ daily_trips, data = zipsInBounds()))
a <- zipsInBounds() %>% group_by(boro) %>% summarize(total = length(boro))
ggplot(a, aes(x=boro, y=total)) +
geom_bar(stat="identity",fill="black", colour="black") +
labs(title="Stations", x="Station Numbers", y="Boros")
})
# This observer is responsible for maintaining the circles and legend,
# according to the variables the user has chosen to map to color and size.
observe({
colorBy <- input$color
sizeBy <- input$size
if (colorBy == "year") {
# Color and palette are treated specially in the "superzip" case, because
# the values are categorical instead of continuous.
colorData <- ifelse(station$year == 2013, "2013", "2015")
pal <- colorFactor(c("blue","firebrick3"), colorData)
} else if (colorBy == "boro") {
colorData <- station$boro
pal <- colorFactor(c("forestgreen","blue","darkorchid4"), colorData)
} else {
colorData <- station[[colorBy]]
pal <- colorBin(c("red","darkviolet","darkblue","black"),
colorData, 4, pretty = FALSE)
}
if (sizeBy == "same") {
# Radius is treated specially in the "superzip" case.
radius <- 90
} else if (sizeBy == "popularity") {
radius <- 90
}
else {
radius <- station[[sizeBy]] / max(station[[sizeBy]]) * 300
}
leafletProxy("map", data = station) %>%
clearShapes() %>%
addCircles(~longitude, ~latitude, radius=radius, layerId=~station.id,
stroke=FALSE, fillOpacity=0.4, fillColor=pal(colorData)) %>%
addLegend("bottomleft", pal=pal, values=colorData, title=colorBy,
layerId="colorLegend")
})
# Show a popup at the given location
showZipcodePopup <- function(zipcode, lat, lng) {
selectedZip <- station[station$station.id == zipcode,]
content <- as.character(tagList(
tags$h4("Station ID:", as.integer(selectedZip$station.id)),
tags$strong(HTML(sprintf("%s, %s",
selectedZip$latitude, selectedZip$longitude
))), tags$br(),
sprintf("The staion's name: %s", as.character(selectedZip$station.name)), tags$br(),
sprintf("The number of trips: %s", as.integer(selectedZip$daily_trips)), tags$br(),
sprintf("In service since: %s", as.character(selectedZip$year))
))
leafletProxy("map") %>% addPopups(lng, lat, content, layerId = zipcode)
}
# When map is clicked, show a popup with city info
observe({
leafletProxy("map") %>% clearPopups()
event <- input$map_shape_click
if (is.null(event))
return()
isolate({
showZipcodePopup(event$id, event$lat, event$lng)
})
})
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui=ui, server=server)
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles("Stamen.TonerLite",
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
station <- read.csv("station_for_map2.csv", stringsAsFactors = F)
View(station)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
load("C:/Users/Richard/Desktop/Rcourse/Saved .DATA/citi_bike_df.RData")
df$date <- as.Date(df$starttime) # load the full df data
df$count <- 1
df <- select(df, tripduration,start.station.id,start.station.name,end.station.id,gender,date,count)
df$ym <- format(df$date, "%Y-%m")
by_station_start <- df %>% group_by(ym, start.station.id) %>% summarize(trips=sum(count)) %>% arrange(desc(trips))
top10 <- filter(by_station_start, row_number() <= 100)
top10$count <- 1
top10 <- group_by(top10, start.station.id)
a <- summarize(top10, num=sum(count))
rank_start <- arrange(a, desc(num))
View(station)
station <- read.csv("citibike/station_for_map1.csv", stringsAsFactors = F)
station <- read.csv("citibike/station_for_map1.csv", stringsAsFactors = F)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?dashboardHeader
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
