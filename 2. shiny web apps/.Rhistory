textInput("name", "Type your name", value = ""),
radioButtons("size","what is the size", list("small","medium","large"),""),
sliderInput("a", label="number simulation", min=1,max=10000, value=3000),
#sliderInput("bin", label="bins", min=1,max=50, value=20),
selectInput("b", label="select the gender:", c("male", "female"), selected = "female"),
selectInput("variable", "Variable:",c("Cylinders" = "cyl","Transmission" = "am","Gears" = "gear")),
selectInput("letter", "Letter", c("Choose one" = "", LETTERS), multiple = T)
),
mainPanel(
h3("IRIS dataset",align="center"),
tabsetPanel(type = "tab",
tabPanel("summary",verbatimTextOutput("summary")),
tabPanel("structure", verbatimTextOutput("str")),
tabPanel("data",tableOutput("data")),
tabPanel("plot",plotOutput("spider"))),
textOutput("name"),textOutput("size1"),
plotOutput("norm"),
textOutput("gender")
)
)
)
server <- function(input, output){
col <- reactive({
as.numeric(input$var)
})
output$summary <- renderPrint(summary(iris))
output$str <- renderPrint(str(iris))
output$data <- renderTable({
# col <- as.numeric(input$var)
iris[col] # here if we wirte iris[,col], it is wrong, because it does not return a table, but a array of numbers.
#head(iris,10);
})
output$spider <- renderPlot({
col <- as.numeric(input$var) # the value is character type, and has to be transfered to numeric
hist(iris[,col],breaks= input$bin,col=input$color, main="hist of iris data", xlab=names(iris)[col])
})
output$name <- renderText(paste("your name is: ", input$name))
output$size1 <- renderText(paste("your chosen size is : ", input$size))
output$gender <- renderText(input$b)
output$norm <- renderPlot(hist(rnorm(input$a), breaks = input$bin, col = 'darkgray', border = 'white'))
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
titlePanel(h1("Richard's Practise Board 05/08/2016",align="center")),
sidebarLayout(
sidebarPanel(
h3("SidebarPanel"), h4("small widges"),
sliderInput("a",'test', min = as.POSIXct(0 * 3600, origin = "1970-01-01", tz = "UTC"),
max=as.POSIXct(23* 3600, origin = "1970-01-01", tz = "UTC"),timeFormat ="%l %p",
value=as.POSIXct(12* 3600, origin = "1970-01-01", tz = "UTC")),
selectInput("var", "1. select the variable", c("sepal.lenght"=1, "sepal,widtt"=2,"petal.length"=3,"petal.width"=4)),
sliderInput("bin", "2. select the number of bins", min=1,max=50, value=20),
radioButtons("color", "3. select the color of the hist", c("lightblue","red","darkgreen"),"lightblue"),
textInput("name", "Type your name", value = ""),
radioButtons("size","what is the size", list("small","medium","large"),""),
sliderInput("a", label="number simulation", min=1,max=10000, value=3000),
#sliderInput("bin", label="bins", min=1,max=50, value=20),
selectInput("b", label="select the gender:", c("male", "female"), selected = "female"),
selectInput("variable", "Variable:",c("Cylinders" = "cyl","Transmission" = "am","Gears" = "gear")),
selectInput("letter", "Letter", c("Choose one" = "", LETTERS), multiple = T)
),
mainPanel(
h3("IRIS dataset",align="center"),
tabsetPanel(type = "tab",
tabPanel("summary",verbatimTextOutput("summary")),
tabPanel("structure", verbatimTextOutput("str")),
tabPanel("data",tableOutput("data")),
tabPanel("plot",plotOutput("spider"))),
textOutput("name"),textOutput("size1"),
plotOutput("norm"),
textOutput("gender")
)
)
)
server <- function(input, output){
col <- reactive({
as.numeric(input$var)
})
output$summary <- renderPrint(summary(iris))
output$str <- renderPrint(str(iris))
output$data <- renderTable({
# col <- as.numeric(input$var)
iris[col] # here if we wirte iris[,col], it is wrong, because it does not return a table, but a array of numbers.
#head(iris,10);
})
output$spider <- renderPlot({
col <- as.numeric(input$var) # the value is character type, and has to be transfered to numeric
hist(iris[,col],breaks= input$bin,col=input$color, main="hist of iris data", xlab=names(iris)[col])
})
output$name <- renderText(paste("your name is: ", input$name))
output$size1 <- renderText(paste("your chosen size is : ", input$size))
output$gender <- renderText(input$b)
output$norm <- renderPlot(hist(rnorm(input$a), breaks = input$bin, col = 'darkgray', border = 'white'))
}
shinyApp(ui=ui, server=server)
as.POSIXct(0 * 3600, origin = "1970-01-01", tz = "UTC")
shiny::runApp()
library(shiny)
ui <- fluidPage(
titlePanel(h1("Richard's Practise Board 05/08/2016",align="center")),
sidebarLayout(
sidebarPanel(
h3("SidebarPanel"), h4("small widges"),
sliderInput("a",'test', min = as.POSIXct(0 * 3600, origin = "1970-01-01", tz = "UTC"),
max=as.POSIXct(23* 3600, origin = "1970-01-01", tz = "UTC"),timeFormat ="%l %p",
value=c(as.POSIXct(0* 3600, origin = "1970-01-01", tz = "UTC"),
as.POSIXct(23* 3600, origin = "1970-01-01", tz = "UTC"))),
selectInput("var", "1. select the variable", c("sepal.lenght"=1, "sepal,widtt"=2,"petal.length"=3,"petal.width"=4)),
sliderInput("bin", "2. select the number of bins", min=1,max=50, value=20),
radioButtons("color", "3. select the color of the hist", c("lightblue","red","darkgreen"),"lightblue"),
textInput("name", "Type your name", value = ""),
radioButtons("size","what is the size", list("small","medium","large"),""),
sliderInput("a", label="number simulation", min=1,max=10000, value=3000),
#sliderInput("bin", label="bins", min=1,max=50, value=20),
selectInput("b", label="select the gender:", c("male", "female"), selected = "female"),
selectInput("variable", "Variable:",c("Cylinders" = "cyl","Transmission" = "am","Gears" = "gear")),
selectInput("letter", "Letter", c("Choose one" = "", LETTERS), multiple = T)
),
mainPanel(
h3("IRIS dataset",align="center"),
tabsetPanel(type = "tab",
tabPanel("summary",verbatimTextOutput("summary")),
tabPanel("structure", verbatimTextOutput("str")),
tabPanel("data",tableOutput("data")),
tabPanel("plot",plotOutput("spider"))),
textOutput("name"),textOutput("size1"),
plotOutput("norm"),
textOutput("gender")
)
)
)
server <- function(input, output){
col <- reactive({
as.numeric(input$var)
})
output$summary <- renderPrint(summary(iris))
output$str <- renderPrint(str(iris))
output$data <- renderTable({
# col <- as.numeric(input$var)
iris[col] # here if we wirte iris[,col], it is wrong, because it does not return a table, but a array of numbers.
#head(iris,10);
})
output$spider <- renderPlot({
col <- as.numeric(input$var) # the value is character type, and has to be transfered to numeric
hist(iris[,col],breaks= input$bin,col=input$color, main="hist of iris data", xlab=names(iris)[col])
})
output$name <- renderText(paste("your name is: ", input$name))
output$size1 <- renderText(paste("your chosen size is : ", input$size))
output$gender <- renderText(input$b)
output$norm <- renderPlot(hist(rnorm(input$a), breaks = input$bin, col = 'darkgray', border = 'white'))
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
titlePanel(h1("Richard's Practise Board 05/08/2016",align="center")),
sidebarLayout(
sidebarPanel(
h3("SidebarPanel"), h4("small widges"),
sliderInput("a",'test', min = as.POSIXct(0 * 3600, origin = "1970-01-01", tz = "UTC"),
max=as.POSIXct(23* 3600, origin = "1970-01-01", tz = "UTC"),timeFormat ="%l %p",
value=c(as.POSIXct(0* 3600, origin = "1970-01-01", tz = "UTC"),
as.POSIXct(23* 3600, origin = "1970-01-01", tz = "UTC"))),
sliderInput("a",'test', 0,23,timeFormat ="%l %p",
value=c(0.23)),
selectInput("var", "1. select the variable", c("sepal.lenght"=1, "sepal,widtt"=2,"petal.length"=3,"petal.width"=4)),
sliderInput("bin", "2. select the number of bins", min=1,max=50, value=20),
radioButtons("color", "3. select the color of the hist", c("lightblue","red","darkgreen"),"lightblue"),
textInput("name", "Type your name", value = ""),
radioButtons("size","what is the size", list("small","medium","large"),""),
sliderInput("a", label="number simulation", min=1,max=10000, value=3000),
#sliderInput("bin", label="bins", min=1,max=50, value=20),
selectInput("b", label="select the gender:", c("male", "female"), selected = "female"),
selectInput("variable", "Variable:",c("Cylinders" = "cyl","Transmission" = "am","Gears" = "gear")),
selectInput("letter", "Letter", c("Choose one" = "", LETTERS), multiple = T)
),
mainPanel(
h3("IRIS dataset",align="center"),
tabsetPanel(type = "tab",
tabPanel("summary",verbatimTextOutput("summary")),
tabPanel("structure", verbatimTextOutput("str")),
tabPanel("data",tableOutput("data")),
tabPanel("plot",plotOutput("spider"))),
textOutput("name"),textOutput("size1"),
plotOutput("norm"),
textOutput("gender")
)
)
)
server <- function(input, output){
col <- reactive({
as.numeric(input$var)
})
output$summary <- renderPrint(summary(iris))
output$str <- renderPrint(str(iris))
output$data <- renderTable({
# col <- as.numeric(input$var)
iris[col] # here if we wirte iris[,col], it is wrong, because it does not return a table, but a array of numbers.
#head(iris,10);
})
output$spider <- renderPlot({
col <- as.numeric(input$var) # the value is character type, and has to be transfered to numeric
hist(iris[,col],breaks= input$bin,col=input$color, main="hist of iris data", xlab=names(iris)[col])
})
output$name <- renderText(paste("your name is: ", input$name))
output$size1 <- renderText(paste("your chosen size is : ", input$size))
output$gender <- renderText(input$b)
output$norm <- renderPlot(hist(rnorm(input$a), breaks = input$bin, col = 'darkgray', border = 'white'))
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
titlePanel(h1("Richard's Practise Board 05/08/2016",align="center")),
sidebarLayout(
sidebarPanel(
h3("SidebarPanel"), h4("small widges"),
sliderInput("a",'test', min = as.POSIXct(0 * 3600, origin = "1970-01-01", tz = "UTC"),
max=as.POSIXct(23* 3600, origin = "1970-01-01", tz = "UTC"),timeFormat ="%l %p",
value=c(as.POSIXct(0* 3600, origin = "1970-01-01", tz = "UTC"),
as.POSIXct(23* 3600, origin = "1970-01-01", tz = "UTC")),
setp=3600),
sliderInput("a",'test', 0,23,timeFormat ="%l %p",
value=c(0.23)),
selectInput("var", "1. select the variable", c("sepal.lenght"=1, "sepal,widtt"=2,"petal.length"=3,"petal.width"=4)),
sliderInput("bin", "2. select the number of bins", min=1,max=50, value=20),
radioButtons("color", "3. select the color of the hist", c("lightblue","red","darkgreen"),"lightblue"),
textInput("name", "Type your name", value = ""),
radioButtons("size","what is the size", list("small","medium","large"),""),
sliderInput("a", label="number simulation", min=1,max=10000, value=3000),
#sliderInput("bin", label="bins", min=1,max=50, value=20),
selectInput("b", label="select the gender:", c("male", "female"), selected = "female"),
selectInput("variable", "Variable:",c("Cylinders" = "cyl","Transmission" = "am","Gears" = "gear")),
selectInput("letter", "Letter", c("Choose one" = "", LETTERS), multiple = T)
),
mainPanel(
h3("IRIS dataset",align="center"),
tabsetPanel(type = "tab",
tabPanel("summary",verbatimTextOutput("summary")),
tabPanel("structure", verbatimTextOutput("str")),
tabPanel("data",tableOutput("data")),
tabPanel("plot",plotOutput("spider"))),
textOutput("name"),textOutput("size1"),
plotOutput("norm"),
textOutput("gender")
)
)
)
server <- function(input, output){
col <- reactive({
as.numeric(input$var)
})
output$summary <- renderPrint(summary(iris))
output$str <- renderPrint(str(iris))
output$data <- renderTable({
# col <- as.numeric(input$var)
iris[col] # here if we wirte iris[,col], it is wrong, because it does not return a table, but a array of numbers.
#head(iris,10);
})
output$spider <- renderPlot({
col <- as.numeric(input$var) # the value is character type, and has to be transfered to numeric
hist(iris[,col],breaks= input$bin,col=input$color, main="hist of iris data", xlab=names(iris)[col])
})
output$name <- renderText(paste("your name is: ", input$name))
output$size1 <- renderText(paste("your chosen size is : ", input$size))
output$gender <- renderText(input$b)
output$norm <- renderPlot(hist(rnorm(input$a), breaks = input$bin, col = 'darkgray', border = 'white'))
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
titlePanel(h1("Richard's Practise Board 05/08/2016",align="center")),
sidebarLayout(
sidebarPanel(
h3("SidebarPanel"), h4("small widges"),
sliderInput("a",'test', min = as.POSIXct(0 * 3600, origin = "1970-01-01", tz = "UTC"),
max=as.POSIXct(23* 3600, origin = "1970-01-01", tz = "UTC"),timeFormat ="%l %p",
value=c(as.POSIXct(0* 3600, origin = "1970-01-01", tz = "UTC"),
as.POSIXct(23* 3600, origin = "1970-01-01", tz = "UTC")),
setp=3600),
sliderInput("a",'test', 0,23,format ="%l %p",
value=c(0.23)),
selectInput("var", "1. select the variable", c("sepal.lenght"=1, "sepal,widtt"=2,"petal.length"=3,"petal.width"=4)),
sliderInput("bin", "2. select the number of bins", min=1,max=50, value=20),
radioButtons("color", "3. select the color of the hist", c("lightblue","red","darkgreen"),"lightblue"),
textInput("name", "Type your name", value = ""),
radioButtons("size","what is the size", list("small","medium","large"),""),
sliderInput("a", label="number simulation", min=1,max=10000, value=3000),
#sliderInput("bin", label="bins", min=1,max=50, value=20),
selectInput("b", label="select the gender:", c("male", "female"), selected = "female"),
selectInput("variable", "Variable:",c("Cylinders" = "cyl","Transmission" = "am","Gears" = "gear")),
selectInput("letter", "Letter", c("Choose one" = "", LETTERS), multiple = T)
),
mainPanel(
h3("IRIS dataset",align="center"),
tabsetPanel(type = "tab",
tabPanel("summary",verbatimTextOutput("summary")),
tabPanel("structure", verbatimTextOutput("str")),
tabPanel("data",tableOutput("data")),
tabPanel("plot",plotOutput("spider"))),
textOutput("name"),textOutput("size1"),
plotOutput("norm"),
textOutput("gender")
)
)
)
server <- function(input, output){
col <- reactive({
as.numeric(input$var)
})
output$summary <- renderPrint(summary(iris))
output$str <- renderPrint(str(iris))
output$data <- renderTable({
# col <- as.numeric(input$var)
iris[col] # here if we wirte iris[,col], it is wrong, because it does not return a table, but a array of numbers.
#head(iris,10);
})
output$spider <- renderPlot({
col <- as.numeric(input$var) # the value is character type, and has to be transfered to numeric
hist(iris[,col],breaks= input$bin,col=input$color, main="hist of iris data", xlab=names(iris)[col])
})
output$name <- renderText(paste("your name is: ", input$name))
output$size1 <- renderText(paste("your chosen size is : ", input$size))
output$gender <- renderText(input$b)
output$norm <- renderPlot(hist(rnorm(input$a), breaks = input$bin, col = 'darkgray', border = 'white'))
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
titlePanel(h1("Richard's Practise Board 05/08/2016",align="center")),
sidebarLayout(
sidebarPanel(
h3("SidebarPanel"), h4("small widges"),
sliderInput("a",'test', min = as.POSIXct(0 * 3600, origin = "1970-01-01", tz = "UTC"),
max=as.POSIXct(23* 3600, origin = "1970-01-01", tz = "UTC"),timeFormat ="%l %p",
value=c(as.POSIXct(0* 3600, origin = "1970-01-01", tz = "UTC"),
as.POSIXct(23* 3600, origin = "1970-01-01", tz = "UTC")),
setp=3600),
sliderInput("a",'test', 0,23,format ="%am",
value=c(0.23)),
selectInput("var", "1. select the variable", c("sepal.lenght"=1, "sepal,widtt"=2,"petal.length"=3,"petal.width"=4)),
sliderInput("bin", "2. select the number of bins", min=1,max=50, value=20),
radioButtons("color", "3. select the color of the hist", c("lightblue","red","darkgreen"),"lightblue"),
textInput("name", "Type your name", value = ""),
radioButtons("size","what is the size", list("small","medium","large"),""),
sliderInput("a", label="number simulation", min=1,max=10000, value=3000),
#sliderInput("bin", label="bins", min=1,max=50, value=20),
selectInput("b", label="select the gender:", c("male", "female"), selected = "female"),
selectInput("variable", "Variable:",c("Cylinders" = "cyl","Transmission" = "am","Gears" = "gear")),
selectInput("letter", "Letter", c("Choose one" = "", LETTERS), multiple = T)
),
mainPanel(
h3("IRIS dataset",align="center"),
tabsetPanel(type = "tab",
tabPanel("summary",verbatimTextOutput("summary")),
tabPanel("structure", verbatimTextOutput("str")),
tabPanel("data",tableOutput("data")),
tabPanel("plot",plotOutput("spider"))),
textOutput("name"),textOutput("size1"),
plotOutput("norm"),
textOutput("gender")
)
)
)
server <- function(input, output){
col <- reactive({
as.numeric(input$var)
})
output$summary <- renderPrint(summary(iris))
output$str <- renderPrint(str(iris))
output$data <- renderTable({
# col <- as.numeric(input$var)
iris[col] # here if we wirte iris[,col], it is wrong, because it does not return a table, but a array of numbers.
#head(iris,10);
})
output$spider <- renderPlot({
col <- as.numeric(input$var) # the value is character type, and has to be transfered to numeric
hist(iris[,col],breaks= input$bin,col=input$color, main="hist of iris data", xlab=names(iris)[col])
})
output$name <- renderText(paste("your name is: ", input$name))
output$size1 <- renderText(paste("your chosen size is : ", input$size))
output$gender <- renderText(input$b)
output$norm <- renderPlot(hist(rnorm(input$a), breaks = input$bin, col = 'darkgray', border = 'white'))
}
shinyApp(ui=ui, server=server)
a = as.POSIXct(23* 3600, origin = "1970-01-01", tz = "UTC")
a
a - 1970-01-01
hour(a)
hours(a)
hour(a)
a$hour
a$hours
a
class(a)
a
str(a)
a$hours
hours(a)
hour(a)
month(a)
months(a)
hours(a)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(kk)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
kk <- read.csv("hour_ex_for_shiny.csv", stringsAsFactors = F)
str(kk)
a <- group_by(kk,date)
b <- summarize(a, trips=sum(trips))
b
mutate(b, trips_m=rollsum(trips, k = 15, na.pad = TRUE, align = "right"))
c<-mutate(b, trips_m=rollsum(trips, k = 15, na.pad = TRUE, align = "right"))
c
ggplot(c, aes(x=date, y=trips_m))+
labs(title="NYC MONTHLY CITIBIKE TRIPS") +
geom_line(size = 1, color = "darkgreen") +
scale_x_date("Month") +
scale_y_continuous("Citi Bike trips, trailing 15 days/Unit: thousands") +
expand_limits(y = 0)
shiny::runApp()
shiny::runApp()
d<-ggplot(c, aes(x=date, y=trips_m))+
labs(title="NYC MONTHLY CITIBIKE TRIPS") +
geom_line(size = 1, color = "darkgreen") +
scale_x_date("Month") +
scale_y_continuous("Citi Bike trips, trailing 15 days/Unit: thousands") +
expand_limits(y = 0)
d
c$date <- as.Date(c$date)
d<-ggplot(c, aes(x=date, y=trips_m))+
labs(title="NYC MONTHLY CITIBIKE TRIPS") +
geom_line(size = 1, color = "darkgreen") +
scale_x_date("Month") +
scale_y_continuous("Citi Bike trips, trailing 15 days/Unit: thousands") +
expand_limits(y = 0)
d
ggplotly(d)
d
d<-ggplot(c, aes(x=date, y=trips_m))+
labs(title="NYC MONTHLY CITIBIKE TRIPS") +
geom_line(size = 1, color = "darkgreen") +
d<-ggplot(c, aes(x=date, y=trips_m))+
labs(title="NYC MONTHLY CITIBIKE TRIPS") +
geom_line(size = 1, color = "darkgreen")
d
ggplotly(d)
d
devtools::install_github("ropensci/plotly")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("curl")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?ggplotly
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
