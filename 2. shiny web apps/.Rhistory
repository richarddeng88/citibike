)
)
body <- dashboardBody(
tabItems(
tabItem(tabName = "readme",
withMathJax(),
includeMarkdown("readMe.Rmd")
),
tabItem(tabName = "plot",
fluidRow(
column(width = 4,
tabBox( width = NULL,
tabPanel(h5("parameters"),
conditionalPanel(condition="input.sequential=='1' | input.mixed=='1' | input.first=='1' | input.alpha=='1' ",
sliderInput("ka", "ka:", value = 0.5, min = 0.1, max = 3, step=0.1)
),
conditionalPanel(condition="input.sequential=='1' | input.mixed=='1' | input.zero=='1' ",
sliderInput("Tk0", "Tk0:", value = 5, min = 0, max = 10, step=0.5)
),
conditionalPanel(condition="input.al=='1'",
sliderInput("alpha", "alpha:", value = 0.5, min = 0, max = 2, step=0.1)
),
conditionalPanel(condition="input.sequential=='1' | input.mixed=='1' ",
sliderInput("F0", "F0:", value = 0.5, min = 0, max = 1, step=0.1)
),
conditionalPanel(condition="input.saturated=='1'",
sliderInput("Vm", "Vm:", value = 0.9, min = 0, max = 2, step=0.1),
sliderInput("Km", "Km:", value = 0.2, min = 0, max = 1, step=0.1)
),
sliderInput("k", "k:", value = 0.1, min = 0, max = 2, step=0.05)
),
tabPanel(h5("dosage"),
sliderInput("tfd", "Time of first dose:", value=0, min=0, max = 20, step=1),
sliderInput("nd", "Number of doses:", value=1, min=0, max = 10, step=1),
sliderInput("ii", "Interdose interval:", value = 9, min = 0.5, max = 15, step=0.5),
sliderInput("amt", "Amount:", value = 5, min = 0, max = 20, step=1)
)
)),
column(width = 8,
box(  width = NULL, plotOutput("plot",height="500px"), collapsible = TRUE,
title = "Plot", status = "primary", solidHeader = TRUE)
))
),
tabItem(tabName = "table",
box( width = NULL, status = "primary", solidHeader = TRUE, title="Table",
downloadButton('downloadTable', 'Download'),
br(),br(),
tableOutput("table")
)
),
tabItem(tabName = "pkmodel",
box( width = NULL, status = "primary", solidHeader = TRUE, title="absorptionModel.txt",
downloadButton('downloadData1', 'Download'),
br(),br(),
pre(includeText("absorptionModel.txt"))
)
),
tabItem(tabName = "ui",
box( width = NULL, status = "primary", solidHeader = TRUE, title="ui.R",
downloadButton('downloadData2', 'Download'),
br(),br(),
pre(includeText("ui.R"))
)
),
tabItem(tabName = "server",
box( width = NULL, status = "primary", solidHeader = TRUE, title="server.R",
downloadButton('downloadData3', 'Download'),
br(),br(),
pre(includeText("server.R"))
)
),
tabItem(tabName = "about",
includeMarkdown("../../about/about.Rmd")
)
)
)
dashboardPage(
dashboardHeader(title = "Absorption processes"),
sidebar,
body
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
histdata <- rnorm(500)
histdata
seq_len(10)
hist(histdata)
library(shiny);library(shinydashboard)
ui <- dashboardPage(skin = "purple",
dashboardHeader(title= "NYC Citibike Ridership",
dropdownMenu(type = "messages",
messageItem(
from = "Sales Dept",
message = "Sales are steady this month."
),
messageItem(
from = "New User",
message = "How do I register?",
icon = icon("question"),
time = "13:45"
),
messageItem(
from = "Support",
message = "The new server is ready.",
icon = icon("life-ring"),
time = "2014-12-01"
)
),
dropdownMenu(type = "notifications",
notificationItem(
text = "5 new users today",
icon("users")
),
notificationItem(
text = "12 items delivered",
icon("truck"),
status = "success"
),
notificationItem(
text = "Server load at 86%",
icon = icon("exclamation-triangle"),
status = "warning"
)
),
dropdownMenu(type = "tasks", badgeStatus = "success",
taskItem(value = 90, color = "green",
"Documentation"
),
taskItem(value = 17, color = "aqua",
"Project X"
),
taskItem(value = 75, color = "yellow",
"Server deployment"
),
taskItem(value = 80, color = "red",
"Overall project"
)
)
),
sidebar <- dashboardSidebar(
sidebarMenu(
sidebarSearchForm(textId = "searchText", buttonId = "searchButton",label = "Search..."),
menuItem("Geo",tabName = "geo",icon=icon("calendar")),
menuItem("Exploratory Analysis", tabName = "eda", icon = icon("dashboard")),
menuItem("Modeling", tabName = "modeling", icon = icon("th"),badgeLabel = "new", badgeColor = "green"),
menuItem("Source code", icon = icon("file-code-o"),
href = "https://github.com/richarddeng88/citibike")
)
),
body <- dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "eda",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "modeling",
h2("Widgets tab content")
),
# Third tab content
tabItem(tabName = "geo",
h2("Geographic tab content")
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui=ui, server=server)
shiny::runApp()
shiny::runApp()
shiny::runApp()
iris[20,1]
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny);library(shinydashboard)
ui <- dashboardPage(skin = "purple",
dashboardHeader(title= "NYC Citibike Ridership",
),
sidebar <- dashboardSidebar(
sidebarMenu(
# sidebarSearchForm(textId = "searchText", buttonId = "searchButton",label = "Search..."),
menuItem("Geo",tabName = "geo",icon=icon("calendar")),
menuItem("Exploratory Analysis", tabName = "eda", icon = icon("dashboard")),
menuItem("Modeling", tabName = "modeling", icon = icon("th"),badgeLabel = "new", badgeColor = "green"),
)
),
body <- dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "eda",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "modeling",
h2("Widgets tab content")
),
# Third tab content
tabItem(tabName = "geo",
h2("Geographic tab content")
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui=ui, server=server)
)
source('C:/Users/Richard/Desktop/dashboard testing.R', echo=TRUE)
)
library(shiny);library(shinydashboard)
ui <- dashboardPage(skin = "purple",
dashboardHeader(title= "NYC Citibike Ridership",
),
sidebar <- dashboardSidebar(
sidebarMenu(
# sidebarSearchForm(textId = "searchText", buttonId = "searchButton",label = "Search..."),
#menuItem("Geo",tabName = "geo",icon=icon("calendar")),
menuItem("Exploratory Analysis", tabName = "eda", icon = icon("dashboard")),
menuItem("Modeling", tabName = "modeling", icon = icon("th"),badgeLabel = "new", badgeColor = "green"),
)
),
body <- dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "eda",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "modeling",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui=ui, server=server)
library(shiny);library(shinydashboard)
ui <- dashboardPage(skin = "purple",
dashboardHeader(title= "NYC Citibike Ridership",
),
sidebar <- dashboardSidebar(
sidebarMenu(
# sidebarSearchForm(textId = "searchText", buttonId = "searchButton",label = "Search..."),
# menuItem("Geo",tabName = "geo",icon=icon("calendar")),
menuItem("Exploratory Analysis", tabName = "eda", icon = icon("dashboard")),
menuItem("Modeling", tabName = "modeling", icon = icon("th"),badgeLabel = "new", badgeColor = "green"),
)
),
body <- dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "eda",
fluidRow(
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("slider", "Number of observations:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "modeling",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui=ui, server=server)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
ui <- fluidPage(
sidebarLayout(
)
)
server <- function(input, output){
}
shinyApp(ui=ui, server=server)
library(shiny)
ui <- fluidPage(
sidebarLayout(
)
)
server <- function(input, output){
}
shinyApp(ui=ui, server=server)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny);library(shinydashboard)
library(leaflet)
library(RColorBrewer)
library(scales)
library(lattice)
library(dplyr)
library(ggplot2)
station <- read.csv("station_for_map2.csv", stringsAsFactors = F)
kk <- read.csv("hour_ex_for_shiny.csv", stringsAsFactors = F)
shinyServer( function(input, output,session) {
# Create the map
output$map <- renderLeaflet({
leaflet(station) %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
# setView(lng=-74.00653609,lat = 40.70955958,zoom = 15)
fitBounds(~min(longitude),~min(latitude),~max(longitude),~max(latitude))
})
# A reactive expression that returns the set of zips that are
# in bounds right now
zipsInBounds <- reactive({
if (is.null(input$map_bounds))
return(station[FALSE,])
bounds <- input$map_bounds
latRng <- range(bounds$north, bounds$south)
lngRng <- range(bounds$east, bounds$west)
subset(station,
latitude >= latRng[1] & latitude <= latRng[2] &
longitude >= lngRng[1] & longitude <= lngRng[2])
})
# Precalculate the breaks we'll need for the two histograms
centileBreaks <- hist(plot = FALSE, station$daily_trips, breaks = 20)$breaks
output$histCentile <- renderPlot({
# If no zipcodes are in view, don't plot
if (nrow(zipsInBounds()) == 0)
return(NULL)
hist(zipsInBounds()$daily_trips,
breaks = centileBreaks,
main = "Histogram of Daily Trips",
xlab = "How Many Trips per Day",
xlim = range(station$daily_trips),
col = 'orangered',
border = 'black')
})
output$scatterCollegeIncome <- renderPlot({
# If no zipcodes are in view, don't plot
if (nrow(zipsInBounds()) == 0)
return(NULL)
print(xyplot(daily_trips ~ rank_score, data = zipsInBounds(), xlab="Popularity Score",
ylab = "Daily Trips"))
#         a <- zipsInBounds() %>% group_by(boro) %>% summarize(total = length(boro))
#         ggplot(a, aes(x=boro, y=total)) +
#             geom_bar(stat="identity",fill="black", colour="black") +
#             labs(title="Stations", x="Station Numbers", y="Boros")
})
# This observer is responsible for maintaining the circles and legend,
# according to the variables the user has chosen to map to color and size.
observe({
colorBy <- input$color
sizeBy <- input$size
if (colorBy == "year") {
# Color and palette are treated specially in the "superzip" case, because
# the values are categorical instead of continuous.
colorData <- ifelse(station$year == 2013, "2013", "2015")
pal <- colorFactor(c("blue","firebrick3"), colorData)
} else if (colorBy == "boro") {
colorData <- station$boro
pal <- colorFactor(c("forestgreen","blue","darkorchid4"), colorData)
} else {
colorData <- station[[colorBy]]
pal <- colorBin(c("red","darkviolet","darkblue","black"),
colorData, 3, pretty = FALSE)
}
if (sizeBy == "same") {
# Radius is treated specially in the "superzip" case.
radius <- 90
} else if (sizeBy == "rank_score") {
radius <- station[[sizeBy]] / max(station[[sizeBy]]) * 150
}
else {
radius <- station[[sizeBy]] / max(station[[sizeBy]]) * 300
}
leafletProxy("map", data = station) %>%
clearShapes() %>%
addCircles(~longitude, ~latitude, radius=radius, layerId=~station.id,
stroke=FALSE, fillOpacity=0.4, fillColor=pal(colorData)) %>%
addLegend("bottomleft", pal=pal, values=colorData, title=colorBy,
layerId="colorLegend")
})
# Show a popup at the given location
showZipcodePopup <- function(zipcode, lat, lng) {
selectedZip <- station[station$station.id == zipcode,]
content <- as.character(tagList(
tags$h4("Station ID:", as.integer(selectedZip$station.id)),
tags$strong(HTML(sprintf("%s, %s",
selectedZip$latitude, selectedZip$longitude
))), tags$br(),
sprintf("The staion's name: %s", as.character(selectedZip$station.name)), tags$br(),
sprintf("In service since: %s", as.character(selectedZip$year)),tags$br(),
sprintf("Avarage daily trips: %s", as.integer(selectedZip$daily_trips)), tags$br(),
sprintf("Popularity score: %s", as.integer(selectedZip$rank_score))
))
leafletProxy("map") %>% addPopups(lng, lat, content, layerId = zipcode)
}
# When map is clicked, show a popup with city info
observe({
leafletProxy("map") %>% clearPopups()
event <- input$map_shape_click
if (is.null(event))
return()
isolate({
showZipcodePopup(event$id, event$lat, event$lng)
})
})
set.seed(122)
histdata <- rnorm(500)
output$pp1 <- renderPlot({
data <- iris[1:input$c,1]
hist(data)
})
}
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
